{"version":3,"sources":["components/spinner/index.js","components/table/table.js","components/table/pagination.js","components/table/rowDetails.js","components/table/search.js","components/modal/index.js","components/form/index.js","components/selectData/index.js","App.js","index.js"],"names":["Spinner","className","Table","posts","loading","onRowSelect","onSort","sort","sortField","isEmpty","onClick","bind","map","item","key","id","phone","firstName","lastName","email","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","length","number","RowDetails","person","description","address","streetAddress","city","state","zip","Search","onSearch","useState","value","setValue","onSubmit","event","preventDefault","type","onChange","target","Modal","title","isOpen","onCancel","children","document","querySelector","AddForm","useForm","register","errors","handleSubmit","htmlFor","ref","required","name","SelectData","onSelect","App","data","setData","setLoading","currentPage","setCurrentPage","itemsPerPage","pagination","setPagination","row","setRow","searchData","setSearchData","setIsOpen","setSort","sortByField","setSortByField","selectData","setSelectData","fetchData","url","a","fetch","response","json","addRowInData","newRow","unshift","indexOfLastPost","indexOfFirstPost","search","slice","result","filter","toLowerCase","includes","getSearchedData","cloneData","concat","sortType","orderedData","orderBy","pageNumber","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0d66e44e.chunk.js","sourcesContent":["import React from 'react';\n\nimport './spinner.css';\n\nconst Spinner = () => {\n    return (\n        <div className='spinner d-flex'>\n            <div className=\"lds-css\">\n                <div className=\"lds-double-ring\">\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport {isEmpty} from 'lodash'\n\nimport Spinner from \"../spinner\";\n\nconst Table = ( {posts, loading, onRowSelect, onSort, sort,sortField}) => {\n\n    if (loading) {\n        return <Spinner/>\n    }\n\n    if (!loading && isEmpty(posts)){\n        return <h2>По вашему запросу ничего не найдено</h2>\n    }\n\n    return (\n        <div>\n            <div className='col-lg-12'>\n                <table className=\"table table-bordered table-hover\">\n                    <thead className=\"thead-dark\">\n                    <tr>\n                        <th onClick={onSort.bind(null, \"id\")}>\n                            ID {sortField === \"id\" ? <small>{sort}</small> : null}\n                        </th>\n                        <th onClick={onSort.bind(null, \"firstName\")}>\n                            First Name{\" \"}\n                            {sortField === \"firstName\" ? <small>{sort}</small> : null}\n                        </th>\n                        <th onClick={onSort.bind(null, \"lastName\")}>\n                            Last Name{\" \"}\n                            {sortField === \"lastName\" ? <small>{sort}</small> : null}\n                        </th>\n                        <th onClick={onSort.bind(null, \"email\")}>\n                            E-mail{\" \"}\n                            {sortField === \"email\" ? <small>{sort}</small> : null}\n                        </th>\n                        <th onClick={onSort.bind(null, \"phone\")}>\n                            Phone{\" \"}\n                            {sortField === \"phone\" ? <small>{sort}</small> : null}\n                        </th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    { posts.map(item =>(\n                        <tr key={item.id + item.phone} onClick={onRowSelect.bind(null, item)}>\n                            <td>{item.id}</td>\n                            <td>{item.firstName}</td>\n                            <td>{item.lastName}</td>\n                            <td>{item.email}</td>\n                            <td>{item.phone}</td>\n                        </tr>\n                    ))}\n\n                    </tbody>\n                </table>\n            </div>\n\n        </div>\n    )\n};\n\n\nexport default Table\n","import React from 'react';\n\nconst Pagination = ({postsPerPage, totalPosts, paginate}) => {\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n        pageNumbers.push(i);\n    }\n    if (pageNumbers.length === 1){\n        return <></>\n    }\n\n    return (\n        <nav className='pagination'>\n            <ul className='pagination'>\n                {pageNumbers.map(number => (\n                    <li key={number} className='page-item'>\n                        <button onClick={() => paginate(number)} className='page-link'>\n                            {number}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\n\nexport default Pagination;\n","import React from \"react\";\n\nconst RowDetails = ({person}) => {\n    return (\n        <div>\n            <p>Выбран пользователь <b>{person.firstName + ' ' + person.lastName}</b></p>\n\n            {person.description &&\n            <div>\n                Описание: <p>{person.description}</p>\n            </div>\n            }\n\n\n            {person.address &&\n            <div>\n                <p>Адрес проживания: <b>{person.address.streetAddress}</b></p>\n                <p>Город: <b>{person.address.city}</b></p>\n                <p>Провинция/штат: <b>{person.address.state}</b></p>\n                <p>Индекс: <b>{person.address.zip}</b></p>\n            </div>\n            }\n\n\n        </div>\n    )\n}\n\nexport default RowDetails\n","import React, {useState} from 'react'\n\nconst Search = ({onSearch}) => {\n    const [value, setValue] = useState('');\n\n    const valueChangeHandler = event => {\n        setValue(event.target.value)\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        onSearch(value)\n    };\n\n    return (\n        <div className='table-search'>\n            <div className=\"input-group mb-3 mt-3 \">\n                <div className=\"input-group-prepend \">\n                    <form onSubmit={handleSubmit} className='d-flex'>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            onChange={valueChangeHandler}\n                            value={value}\n                        />\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type='submit'\n                        >\n                            Search\n                        </button>\n                    </form>\n\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default Search\n","import React from \"react\";\n\nimport './modal.css';\n\nconst Modal = ({\n                   title, isOpen, onCancel, children,\n               }) => {\n\n    const closeOnOverlay = (event) => {\n        if (event.target === document.querySelector('.modalOverlay')) onCancel()\n    };\n\n    return (\n        <>\n            {isOpen &&\n            <div className=\"modalOverlay\" onClick={closeOnOverlay}>\n                <div className=\"modalWindow\">\n                    <div className=\"modalHeader\">\n                        <div className=\"modalTitle\">{title}</div>\n                        <div className=\"times\" onClick={onCancel}>&times;</div>\n                    </div>\n                    <div className=\"modalBody\">\n                        {children}\n                    </div>\n                    <div className=\"modalFooter\">\n                    </div>\n                </div>\n            </div>\n\n            }\n        </>\n    );\n};\n\nexport default Modal\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst AddForm = ({onSubmit}) => {\n    const { register,errors, handleSubmit } = useForm();\n\n    return (\n        <>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"form-id\">id</label>\n                    <input type=\"text\" className={`form-control ${errors.id ? 'form-error':''}`} id=\"form-id\" ref={register({required: true})} name='id'/>\n                    <div className=\"form-error-info\">\n                        {errors.id && \"id is required\"}\n                    </div>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"form-first-name\">firstName</label>\n                    <input type=\"text\" className={`form-control ${errors.firstName ? 'form-error':''}`} id=\"form-first-name\" ref={register({required: true})} name='firstName'/>\n                    <div className=\"form-error-info\">\n                        {errors.firstName && \"firstName is required\"}\n                    </div>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"form-last-name\">lastName</label>\n                    <input type=\"text\" className={`form-control ${errors.lastName ? 'form-error':''}`} id=\"form-last-name\" ref={register({required: true})} name='lastName'/>\n                    <div className=\"form-error-info\">\n                        {errors.lastName && \"lastName is required\"}\n                    </div>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"form-email\">email</label>\n                    <input type=\"text\" className={`form-control ${errors.email ? 'form-error':''}`} id=\"form-email\" ref={register({required: true})} name='email'/>\n                    <div className=\"form-error-info\">\n                        {errors.email && \"email is required\"}\n                    </div>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"form-phone\">phone</label>\n                    <input type=\"text\" className={`form-control ${errors.phone ? 'form-error':''}`} id=\"form-phone\" ref={register({required: true})} name='phone'/>\n                    <div className=\"form-error-info\">\n                        {errors.phone && \"phone is required\"}\n                    </div>\n                </div>\n\n                <button type=\"submit\" className='btn btn-success btn-block'>Submit</button>\n            </form>\n        </>\n    );\n};\n\nexport default AddForm\n","import React from 'react';\n\nconst SelectData = ({onSelect}) => {\n    const smallData = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n    const bigData = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n    return (\n        <div className='jumbotron'>\n            <h1 className=\"display-4\">Sortable List</h1>\n            <p className=\"lead\">Simple table with search, filters. If click on row, under table display more details.If click on \"add\" button, will be show modal window with form.</p>\n            <hr className=\"my-4\"/>\n            <p>Please choose how much data to display.</p>\n            <div>\n                <button onClick={() => onSelect(smallData)} className=\"btn btn-success \">show Small data(32 elements)</button>\n                <button onClick={() => onSelect(bigData)} className=\"btn btn-danger m-2\">show Big data(1000 elements)</button>\n            </div>\n        </div>\n    )\n};\nexport default SelectData;\n","import React, {useState} from 'react';\nimport {orderBy} from 'lodash';\n\nimport Table from \"./components/table/table\";\nimport Pagination from \"./components/table/pagination\";\nimport RowDetails from \"./components/table/rowDetails\"\nimport Search from \"./components/table/search\";\nimport Modal from \"./components/modal\";\nimport AddForm from \"./components/form\";\nimport SelectData from \"./components/selectData\";\n\nimport './app.css';\n\nconst App = () => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [itemsPerPage] = useState(50);\n    const [pagination, setPagination] = useState(true);\n    const [row, setRow] = useState(null);\n    const [searchData, setSearchData] = useState(null);\n    const [isOpen, setIsOpen] = useState(false);\n    const [sort, setSort] = useState('');\n    const [sortByField, setSortByField] = useState('id');\n    const [selectData, setSelectData] = useState(false);\n\n    const fetchData = async (url) => {\n        setLoading(true);\n        setSelectData(true);\n        const response = await fetch(url);\n        const data = await response.json();\n        setData(data);\n        setLoading(false);\n    };\n    // Modal\n    const openModal = () => {\n        setIsOpen(true);\n    };\n\n    const addRowInData = (newRow) => {\n        data.unshift(newRow);\n        setIsOpen(false);\n\n    };\n\n    const handleCancel = () => {\n        setIsOpen(false);\n    };\n\n    // Get current post\n    const indexOfLastPost = currentPage * itemsPerPage;\n    const indexOfFirstPost = indexOfLastPost - itemsPerPage;\n\n    // Change page\n    const paginate = pageNumber => setCurrentPage(pageNumber);\n\n    const onRowSelect = row => {\n        setRow(row);\n    };\n\n    // Sort\n    const onSort = sortField => {\n\n        const cloneData = data.concat();\n        const sortType = sort === 'asc' ? 'desc' : 'asc';\n        const orderedData = orderBy(cloneData, sortField, sortType);\n\n        setData(orderedData);\n        setSort(sortType);\n        setSortByField(sortField);\n    };\n\n    // Search\n    const searchHandler = (search) => {\n        search.length ? setPagination(false) : setPagination(true);\n        setSearchData(search);\n    };\n\n    const getSearchedData = () => {\n        if (!searchData) {\n            return data.slice(indexOfFirstPost, indexOfLastPost);\n        }\n        let result = data.filter(item => {\n            return (\n                item[\"firstName\"].toLowerCase().includes(searchData.toLowerCase()) ||\n                item[\"lastName\"].toLowerCase().includes(searchData.toLowerCase()) ||\n                item[\"email\"].toLowerCase().includes(searchData.toLowerCase())\n            );\n        });\n        if (!result.length) {\n            result = [];\n        }\n        return result.slice(indexOfFirstPost, indexOfLastPost);\n\n    };\n\n    if(!selectData){\n        return (\n            <div className=\"container\">\n                <SelectData onSelect={fetchData}/>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"container\">\n            <SelectData onSelect={fetchData}/>\n            <div className='table-header col-lg-12'>\n                <Search onSearch={searchHandler}/>\n                <div>\n                    <button type=\"button\" className=\"btn btn-primary btn-lg btn-block\" onClick={openModal}>add new row +</button>\n                </div>\n            </div>\n\n            <Modal\n                title=\"Add new row in table\"\n                isOpen={isOpen}\n                onCancel={handleCancel}\n                onSubmit={addRowInData}\n            >\n                <AddForm onSubmit={addRowInData}/>\n            </Modal>\n\n\n            <Table posts={getSearchedData()}\n                   loading={loading}\n                   onRowSelect={onRowSelect}\n                   onSort={onSort}\n                   sort={sort}\n                   sortField={sortByField}\n            />\n\n            {pagination ? <Pagination postsPerPage={itemsPerPage} totalPosts={data.length} paginate={paginate}/> : null}\n\n            {row ? <RowDetails person={row}/> : null}\n        </div>\n    );\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}